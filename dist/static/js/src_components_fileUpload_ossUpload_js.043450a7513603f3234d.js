"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcompetition"] = self["webpackChunkcompetition"] || []).push([["src_components_fileUpload_ossUpload_js"],{

/***/ "./src/components/fileUpload/oss-sdk.js":
/*!**********************************************!*\
  !*** ./src/components/fileUpload/oss-sdk.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar _interopRequireDefault = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/interopRequireDefault.js */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _regeneratorRuntime2 = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js */ \"./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\n\nvar _aliOss = _interopRequireDefault(__webpack_require__(/*! ali-oss */ \"./node_modules/ali-oss/dist/aliyun-oss-sdk.js\"));\n\nvar _extend = function _extend(dst, src) {\n  for (var i in src) {\n    if (Object.prototype.hasOwnProperty.call(src, i) && src[i]) {\n      dst[i] = src[i];\n    }\n  }\n};\n\nfunction OssUpload(config) {\n  if (!config) {\n    return;\n  }\n\n  this.uploadEnable = true;\n  this.tempCheckpoint = null;\n  this._config = {\n    chunkSize: 1048576 // 1MB\n\n  };\n\n  if (this._config.chunkSize && this._config.chunkSize < 102400) {\n    return;\n  }\n\n  _extend(this._config, config);\n\n  if (!this._config.stsToken) return console.log('needkey');\n  this.oss = new _aliOss.default({\n    accessKeyId: this._config.stsToken.credentials.AccessKeyId,\n    accessKeySecret: this._config.stsToken.credentials.AccessKeySecret,\n    stsToken: this._config.stsToken.credentials.SecurityToken,\n    bucket: this._config.bucket,\n    region: this._config.region\n  });\n}\n\nOssUpload.prototype.upload = function (options) {\n  var _self = this;\n\n  if (!options) {\n    if (typeof options.onerror == 'function') {\n      options.onerror('需要 options');\n    }\n\n    return;\n  }\n\n  if (!options.file) {\n    if (typeof options.onerror == 'function') {\n      options.onerror('需要 file');\n    }\n\n    return;\n  }\n\n  var file = options.file;\n\n  if (!options.key) {\n    if (typeof options.onerror == 'function') {\n      options.onerror('需要 key');\n    }\n\n    return;\n  }\n\n  var key = options.key; // 定义上传方法\n\n  function multipartUpload() {\n    return _multipartUpload.apply(this, arguments);\n  }\n\n  function _multipartUpload() {\n    _multipartUpload = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee2() {\n      var result;\n      return (0, _regeneratorRuntime2.default)().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _self.oss.multipartUpload(key, file, {\n                progress: function () {\n                  var _progress = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee(p, checkpoint) {\n                    return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            // 断点记录点。 浏览器重启后无法直接继续上传，需用户手动触发进行设置。\n                            options.onprogress(p, file);\n                            self.tempCheckpoint = checkpoint;\n\n                          case 2:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  function progress(_x, _x2) {\n                    return _progress.apply(this, arguments);\n                  }\n\n                  return progress;\n                }(),\n                meta: {\n                  year: 2019,\n                  people: 'web'\n                }\n              });\n\n            case 3:\n              result = _context2.sent;\n              options.oncomplete(result);\n              _context2.next = 11;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              options.onerror(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n    return _multipartUpload.apply(this, arguments);\n  }\n\n  multipartUpload();\n};\n\nOssUpload.prototype.delete = function (ossKey) {\n  this.oss.delete(ossKey);\n}; //todo 自动判断当前长传文件是否有上传过 有的话就使用resume\n\n\nOssUpload.prototype.resume = function () {\n  var self = this;\n\n  function resumeUpload() {\n    return _resumeUpload.apply(this, arguments);\n  }\n\n  function _resumeUpload() {\n    _resumeUpload = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee4() {\n      var result;\n      return (0, _regeneratorRuntime2.default)().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return self.multipartUpload(key, 'local-file', {\n                progress: function () {\n                  var _progress2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee3(p, checkpoint) {\n                    return (0, _regeneratorRuntime2.default)().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            options.onprogress(p);\n                            self.tempCheckpoint = checkpoint;\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  function progress(_x3, _x4) {\n                    return _progress2.apply(this, arguments);\n                  }\n\n                  return progress;\n                }(),\n                checkpoint: self.tempCheckpoint\n              });\n\n            case 3:\n              result = _context4.sent;\n              options.oncomplete(result);\n              _context4.next = 11;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(_context4.t0);\n              options.onerror(_context4.t0);\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 7]]);\n    }));\n    return _resumeUpload.apply(this, arguments);\n  }\n\n  resumeUpload();\n};\n\nvar _default = OssUpload;\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack://competition/./src/components/fileUpload/oss-sdk.js?");

/***/ }),

/***/ "./src/components/fileUpload/ossUpload.js":
/*!************************************************!*\
  !*** ./src/components/fileUpload/ossUpload.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar _interopRequireDefault = (__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/interopRequireDefault.js */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _regeneratorRuntime2 = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js */ \"./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/helpers/asyncToGenerator.js */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\n\nvar _index = _interopRequireDefault(__webpack_require__(/*! @@/api/jxapi/index */ \"./src/api/jxapi/index.js\"));\n\nvar _util = _interopRequireDefault(__webpack_require__(/*! @@/utils/util */ \"./src/utils/util.js\"));\n\nvar _ossSdk = _interopRequireDefault(__webpack_require__(/*! ./oss-sdk */ \"./src/components/fileUpload/oss-sdk.js\"));\n\nvar _commons = __webpack_require__(/*! @@/utils/commons */ \"./src/utils/commons.js\");\n\nvar BUCKET = 'competition-pool'; //'compeition-excute'\n\nvar REGION = 'oss-cn-hangzhou'; //\"oss-cn-beijing\"\n\nvar CDN = 'oss.moocollege.com';\n/*\r\n 杭州：https://oss-cn-hangzhou.aliyuncs.com\r\n 北京：https://oss-cn-beijing.aliyuncs.com\r\n 青岛：https://oss-cn-qingdao.aliyuncs.com\r\n 深圳：https://oss-cn-shenzhen.aliyuncs.com\r\n 香港：https://oss-cn-hongkong.aliyuncs.com\r\n */\n\nvar FILE_PATH_NAME = 'webFile/{RANDOM_CHAR}'; //皮肤储存\n\nvar SKIN_PATH = \"skin/{RANDOM_CHAR}\"; //富文本编辑器\n\nvar EDIT_PATH = 'edit/{RANDOM_CHAR}'; //协议管理平台\n\nvar ADMIN_PATH = 'admin/{RANDOM_CHAR}'; //评审\n\nvar WX_PATH = 'wxFile/{RANDOM_CHAR}'; //作品\n\nvar POOL_PATH = \"works/{RANDOM_CHAR}\"; //评审\n\nvar EXPERT_PATH = 'expert/{RANDOM_CHAR}';\nvar RANDOM_CHAR_LENGTH = 8;\nvar SCHEME = 'https'; //处理文件路径\n\nvar userRandom = function userRandom(config, fileName) {\n  fileName = fileName.substr(0, fileName.lastIndexOf(\".\"));\n  var folder = config.folder;\n  var User = (0, _commons.getUserInfo)() || {};\n  var date = new Date();\n  if (!!config.temp) return \"temp/\".concat(User.nickname ? User.nickname + '/' : '').concat(fileName); //文件名外面的文件夹命\n\n  var folderName = folder ? folder + '/' : ''; //2021.7.16 刘军(网络技术挑战)要求拿掉作品的用户名\n\n  var nickname = ''; //User.nickname ? User.nickname + '/' : '';\n\n  var _fileName = config.noHash ? fileName : \"\".concat(_util.default.randomChar(RANDOM_CHAR_LENGTH), \"_\").concat(date.getTime());\n\n  return \"\".concat(folderName).concat(nickname).concat(_fileName);\n};\n/**\r\n * 获取OSS STS Client\r\n *\r\n * @param bucket\r\n * @param callback\r\n * @private\r\n */\n\n\nvar _getOss = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee(callback) {\n    var token, ossUpload;\n    return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _index.default.getOssKey();\n\n          case 2:\n            token = _context.sent;\n            ossUpload = new _ossSdk.default({\n              bucket: BUCKET,\n              region: REGION,\n              // 如果文件大于 chunkSize 则分块上传, chunkSize 不能小于 100KB 即 102400\n              // chunkSize: 102400,\n              // 分块上传的并发数\n              concurrency: 2,\n              stsToken: token\n            });\n            callback(null, ossUpload);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function _getOss(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction _upload(file, callback, progress) {\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var checkUploadEnable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {\n    return true;\n  };\n\n  _getOss( /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee2(err, ossUpload) {\n      var FILE_PATH, gId, fileName, fileSuffix, fileId, fileKey;\n      return (0, _regeneratorRuntime2.default)().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (checkUploadEnable()) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              if (!err) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", callback(err));\n\n            case 4:\n              FILE_PATH = ''; //config.skin? SKIN_PATH : FILE_PATH_NAME''\n              //兼容之前的config.skin\n\n              config.fileType = config.skin ? 1 : config.fileType; //不填写到作品提交，1皮肤，2编辑器，3，admin 4expert 5.小程序 6作品\n\n              _context2.t0 = config.fileType;\n              _context2.next = _context2.t0 === 1 ? 9 : _context2.t0 === 2 ? 11 : _context2.t0 === 3 ? 13 : _context2.t0 === 4 ? 15 : _context2.t0 === 5 ? 17 : _context2.t0 === 6 ? 19 : 21;\n              break;\n\n            case 9:\n              FILE_PATH = SKIN_PATH;\n              return _context2.abrupt(\"break\", 22);\n\n            case 11:\n              FILE_PATH = EDIT_PATH;\n              return _context2.abrupt(\"break\", 22);\n\n            case 13:\n              FILE_PATH = ADMIN_PATH;\n              return _context2.abrupt(\"break\", 22);\n\n            case 15:\n              FILE_PATH = EXPERT_PATH;\n              return _context2.abrupt(\"break\", 22);\n\n            case 17:\n              FILE_PATH = WX_PATH;\n              return _context2.abrupt(\"break\", 22);\n\n            case 19:\n              FILE_PATH = POOL_PATH;\n              return _context2.abrupt(\"break\", 22);\n\n            case 21:\n              FILE_PATH = FILE_PATH_NAME;\n\n            case 22:\n              _context2.next = 24;\n              return localStorage.getItem(\"competitionId\");\n\n            case 24:\n              _context2.t1 = _context2.sent;\n\n              if (_context2.t1) {\n                _context2.next = 29;\n                break;\n              }\n\n              _context2.next = 28;\n              return localStorage.getItem(\"compId\");\n\n            case 28:\n              _context2.t1 = _context2.sent;\n\n            case 29:\n              gId = _context2.t1;\n              //竞赛ID\n              fileName = file.name || '', fileSuffix = fileName.match(/.*(\\.\\w+)/) || '', fileId = \"\".concat(gId ? gId : 'unknow', \"/\").concat(FILE_PATH.replace('{RANDOM_CHAR}', userRandom(config, fileName)));\n              console.log(fileSuffix);\n              fileSuffix = fileSuffix && fileSuffix[1];\n              fileKey = \"\".concat(fileId).concat(fileSuffix);\n              ossUpload.upload({\n                // 必传参数, 需要上传的文件对象\n                file: file,\n                // 必传参数, 文件上传到 oss 后的名称, 包含路径\n                key: fileKey,\n                onprogress: function onprogress(evt, file) {\n                  if (!checkUploadEnable()) return ossUpload.uploadEnable = false; // var _evt = evt\n                  // _evt.percent = parseFloat((evt.loaded * 100 / evt.total).toFixed(2))\n\n                  progress && progress(evt, file);\n                },\n                // 文件上传失败后调用, 可选参数\n                onerror: function onerror(evt) {\n                  if (!checkUploadEnable()) return;\n                  callback(evt);\n                },\n                // 文件上传成功调用, 可选参数\n                oncomplete: function oncomplete(res) {\n                  if (!checkUploadEnable()) return;\n                  res.location = \"\".concat(SCHEME, \"://\").concat(CDN, \"/\").concat(res.name), // multipart方式上传oss会返回Location等信息\n                  // single上传则oss只返回ETag和RequestID\n                  // 所以必须手动添加返回信息\n                  callback(null, res);\n                }\n              });\n\n            case 35:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\n\nfunction _del(key) {\n  _getOss(function (err, ossUpload) {\n    if (err) return;\n    ossUpload.delete(key);\n  });\n}\n\nvar _default = {\n  upload: _upload,\n  delete: _del\n};\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack://competition/./src/components/fileUpload/ossUpload.js?");

/***/ })

}]);